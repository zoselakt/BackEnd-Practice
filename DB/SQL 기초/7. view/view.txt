-- VIEW
--기존의 테이블은 그대로 놔둔채 필요한 컬럼들 및 새로운 컬럼을 만든 가상 테이블.
--실제 데이터가 저장되는 것은 아니지만 VIEW를 통해서 데이터를 관리할 수 있다.

--독립성: 다른 곳에서 변경하지 못하도록 설정
--편리성: 긴 쿼리문(조건식)을 짦게 사용가능
--보안성: 짦게 만들기 때문에 기준의 쿼리는 보이지 않는다.

--특징 
--1. 뷰가 정의된 기본테이블이 변경 되면, 뷰도 자동적으로 변경 됩니다.
--2. 외부 스키마는 뷰와 기본 테이블 정의로 구성됩니다.
--3. 뷰에 대한 검색은 기본테이블과 거의 동일하지만 삽입, 삭제, 갱신은 제약을 받게 됩니다.
--4. DBA 는 보안측면에서 뷰를 활용할수 있습니다.
--5. 뷰는 CREATE문에 의해 정의 되며 SYSVIEW에 저장됩니다.
--6. 한번 정의된 뷰는 변경할수 없으며, 삭제한 후에 다시 생성해야 합니다.
--7. 뷰의 정의는 ALTER 문을 이용하여 변경할수 없습니다.
--8. 뷰를 제거 할때에는 DROP 문을 사용합니다.

--장점
--1. 논리적 독립성을 제공합니다.
--2. 데이터 접근 제어로 보안 가능합니다.
--  - 뷰를 통해 접근하기 때문에 뷰에 나타나지 않는 데이터를 보호 할수 있습니다.
--3. 사용자의 데이터 관리를 간단하게 합니다.
--4. 하나의 테이블로 여러개의 상이한 뷰를 정의할수 있습니다.

--단점
--1. 독자적인 인덱스를 가질수 없습니다.
--2. 정의를 변경할수 없습니다.
--3. 삽입, 삭제, 갱신 연산에 많은 제약이 따릅니다.


CREATE VIEW PLAYER_AGE
AS(SELECT ROUND((SYSDATE - BIRTH_DATE) / 365) AGE, P.* FROM PLAYER P);

SELECT * FROM PLAYER_AGE;
DROP VIEW PLAYER_AGE;

--30살이 넘는 선수 검색
SELECT * FROM PLAYER_AGE WHERE AGE > 30;

-- EMPLOYEES 테이블에서 사원이름과 그 사원의 매니저 이름이 있는 VIEW만들기 - FLOWER계정
SELECT * FROM HR.EMPLOYEES;
CREATE VIEW EMPLOYEES_MANAGER
AS (
	SELECT E1.LAST_NAME || ' ' || E1.FIRST_NAME AS ENAME, E2.LAST_NAME ||' '|| E2.FIRST_NAME AS MNAME
	FROM HR.EMPLOYEES E1 JOIN HR.EMPLOYEES E2
	ON E1.MANAGER_ID = E2.EMPLOYEE_ID
);
SELECT * FROM EMPLOYEES_MANAGER;

--KING STEVEN의 사원목록 조회
SELECT MNAME, ENAME FROM EMPLOYEES_MANAGER
WHERE MNAME = 'King Steven';
----------------------------------------------------------------------------
--PLAYER테이블에 TEAM_NAME 컬럼을 추가한 VIEW만들기
SELECT * FROM HR.TEAM;

CREATE VIEW PLAYER_TEAM_NAME
AS
(
	SELECT T.TEAM_NAME, P.* FROM PLAYER P JOIN HR.TEAM T
	ON P.TEAM_ID = T.TEAM_ID
);

SELECT * FROM PLAYER_TEAM_NAME;
------------------------------------------------------------------------------
--HOMETEAM_ID, STADIUM_NAME, TEAM_NAME 검색
-- HOMETEAM이 없는 경기장 이름도 검색하고 VIEW로 만들기
--이 VIEW에서 TEAM_NAME이 NULL인 경기장 검색하기

CREATE VIEW STADIUM_INFO 
AS
(
	SELECT S.HOMETEAM_ID, S.STADIUM_NAME, T.TEAM_NAME 
	FROM HR.TEAM T RIGHT OUTER JOIN HR.STADIUM S
	ON T.TEAM_ID = S.HOMETEAM_ID
);

SELECT * FROM STADIUM_INFO
WHERE TEAM_NAME IS NULL;

--EMPLOYEES 테이블에서 사원들의 FIRST_NAME 모두검색
-- 사원들 중에서 매니저들은 그 JOB_ID 검색
-- VIEW로 만들고 매니저가 아니면서 FIRST_NAME이 A로 시작하는 사원검색
CREATE VIEW MANAGER_INFO
AS
(
	SELECT E2.JOB_ID, E1.FIRST_NAME
	FROM HR.EMPLOYEES E1 LEFT OUTER JOIN
	(
		SELECT JOB_ID, MANAGER_ID M FROM HR.EMPLOYEES
	) E2
	ON E1.EMPLOYEE_ID = E2.M
);
SELECT JOB_ID, MANAGER_ID M FROM HR.EMPLOYEES;

SELECT * FROM MANAGER_INFO;

SELECT * FROM MANAGER_INFO
WHERE JOB_ID IS NOT NULL
ORDER BY 2;

SELECT FIRST_NAME FROM MANAGER_INFO
WHERE JOB_ID IS NOT NULL
GROUP BY FIRST_NAME;